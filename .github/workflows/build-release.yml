name: Build Release

on:
  push:
    tags:
      - 'v*'

jobs:

  build-distros:
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]

    runs-on: ${{ matrix.os }}

    permissions: write-all

    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          package_json_file: frontend/app/package.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: frontend/app/.nvmrc

      - name: Setup python (non-macOS)
        if: ${{ matrix.os != 'macos-latest' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.9

      - name: Setup python (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        shell: bash
        run: |
          brew install pyenv pyenv-virtualenv

          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          
          # Initialize pyenv and pyenv-virtualenv for the current shell
          eval "$(pyenv init --path)" # Ensures pyenv command is found via shims/bin
          eval "$(pyenv init -)"      # Sets up shims and other integrations
          eval "$(pyenv virtualenv-init -)" # Defines 'pyenv activate' and other venv functions

          pyenv install --skip-existing 3.11.9
          
          # Create virtualenv if it doesn't exist
          if ! pyenv virtualenvs --bare | grep -q "^finanze$"; then
            pyenv virtualenv 3.11.9 finanze
          else
            echo "Virtualenv 'finanze' already exists."
          fi
          
          # Activate for this script block (confirms setup)
          pyenv activate finanze
          
          # Set for pyenv to use this venv in the current directory context
          pyenv local finanze
          
          # Make pyenv and the virtualenv available to subsequent steps in the job
          echo "$PYENV_ROOT/bin" >> $GITHUB_PATH
          echo "$PYENV_ROOT/shims" >> $GITHUB_PATH
          echo "$PYENV_ROOT/versions/finanze/bin" >> $GITHUB_PATH

      - name: Install packaging & runtime deps
        shell: bash
        run: |
          pip install -r requirements-packaging.txt -r requirements.txt

      - name: Setup virtual env (non-Windows)
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          python3 -m venv $HOME/venv
          echo "$HOME/venv/bin" >> $GITHUB_PATH

      - name: Package
        run: |
          python3 package.py --target full

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload "${{ github.event.release.tag_name }}" dist/* --clobber

  docker-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Publish frontend image
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: marcosav/finanze-frontend
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          default_branch: main
          workdir: frontend
          platforms: linux/amd64,linux/arm64/v8
          tags: |
            ${{ github.event.release.tag_name }}
            latest

      - name: Publish selenium image
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: marcosav/finanze
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          default_branch: main
          platforms: linux/amd64,linux/arm64/v8
          buildargs: SELENIUM_SUPPORT=true
          tags: |
            ${{ github.event.release.tag_name }}-selenium
            latest-selenium

      - name: Publish no-selenium image
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: marcosav/finanze
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          default_branch: main
          platforms: linux/amd64,linux/arm64/v8
          buildargs: SELENIUM_SUPPORT=false
          tags: |
            ${{ github.event.release.tag_name }}-no-selenium
            latest-no-selenium